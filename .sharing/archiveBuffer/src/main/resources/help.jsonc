{
    "stdlib": [
        {
            "name": "inc",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The register to increment"
                }
            ],
            "info": "Increments F1 by 1 and returns the incremented result"
        },
        {
            "name": "dec",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The register to decrement"
                }
            ],
            "info": "Decrements F1 by 1 and returns the decremented result"
        },
        {
            "name": "exit",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The wanted exit code"
                }
            ],
            "info": "Exits with the exited code in the register F1"
        },
        {
            "name": "findfirststring",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The sting pointer"
                },
                {
                    "name": "F2",
                    "info": "This is the Char you want to look for"
                }
            ],
            "info": "Will look though the string (F1). Until it finds the closest Char (F2). Returns the location in memory of the wanted char. If not found returns -1"
        },
        {
            "name": "max",
            "arguments": [
                {
                    "name": "F1",
                    "info": "Number A to compare"
                },
                {
                    "name": "F2",
                    "info": "Number B to compare"
                }
            ],
            "info": "Compares F1 & F2 and returns the biggest value"
        },
        {
            "name": "min",
            "arguments": [
                {
                    "name": "F1",
                    "info": "Number A to compare"
                },
                {
                    "name": "F2",
                    "info": "Number B to compare"
                }
            ],
            "info": "Compares F1 & F2 and returns the smallest value"
        },
        {
            "name": "neg",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The value to change the sign of"
                }
            ],
            "info": "Changes the sign of F1. Like from negative to positive to vice versa"
        },
        {
            "name": "println",
            "arguments": [
                {
                    "name": "F1",
                    "info": "The string to print to the screen"
                }
            ],
            "info": "Writes a string to the screen with a new line"
        },
        {
            "name": "readln",
            "arguments": [],
            "info": "Reads the current input from stdin. And returns the string pointer"
        }
    ],
    "instructions": [
        {
            "name": "xlit",
            "arguments": [
                {
                    "name": "register",
                    "info": "The register to load the literal into"
                },
                {
                    "name": "literal",
                    "info": "The literal value to load into the register (can be any data type)"
                }
            ],
            "info": "Loads a literal value into a register. The data type is determined at runtime."
        },
        {
            "name": "settype",
            "arguments": [
                {
                    "name": "register",
                    "info": "The register to set the data type of"
                },
                {
                    "name": "dataType",
                    "info": "The data type to set (e.g., \"Long\", \"Double\", \"String\", \"Array\")"
                }
            ],
            "info": "Sets the data type of a register."
        },
        {
            "name": "help",
            "arguments": [
                {
                    "name": "command",
                    "info": "The instruction or function to display help information for"
                }
            ],
            "info": "Displays help information for an instruction or standard library function."
        },
        {
            "name": "call",
            "arguments": [
                {
                    "name": "function_name",
                    "info": "The name of the function to call (from stdlib or user-defined)"
                }
            ],
            "info": "Calls a function. Arguments are passed in F registers. The return value (if any) is pushed onto the stack."
        },
        {
            "name": "substr",
            "arguments": [
                {
                    "name": "string",
                    "info": "Register containing the address of the string"
                },
                {
                    "name": "startIndex",
                    "info": "Register containing the starting index of the substring (inclusive)"
                },
                {
                    "name": "endIndex",
                    "info": "Register containing the ending index of the substring (exclusive)"
                }
            ],
            "info": "Extracts a substring from a string and stores the result in R2."
        },
        {
            "name": "str",
            "arguments": [
                {
                    "name": "destination",
                    "info": "Register to hold the address where the string is stored"
                },
                {
                    "name": "string",
                    "info": "The string literal to store in memory (enclosed in double quotes)"
                }
            ],
            "info": "Stores a string literal in memory."
        },
        {
            "name": "syscall",
            "arguments": [
                {
                    "name": "id",
                    "info": "System call ID"
                }
            ],
            "info": "Executes a system call. Arguments are passed in S registers. The result (if any) is stored in R2."
        },
        {
            "name": "lit",
            "arguments": [
                {
                    "name": "register",
                    "info": "The register to load the literal into"
                },
                {
                    "name": "Long_literal",
                    "info": "The 64-bit integer value to load into the register"
                }
            ],
            "info": "Loads a 64-bit integer literal into a register."
        },
        {
            "name": "add",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Adds two numbers and stores the result in R4."
        },
        {
            "name": "sub",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The operand to subtract from (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The operand to subtract (register or value)"
                }
            ],
            "info": "Subtracts two numbers and stores the result in R4."
        },
        {
            "name": "mul",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Multiplies two numbers and stores the result in R4."
        },
        {
            "name": "div",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The dividend (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The divisor (register or value)"
                }
            ],
            "info": "Divides two numbers and stores the result in R4."
        },
        {
            "name": "mod",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The dividend (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The divisor (register or value)"
                }
            ],
            "info": "Calculates the modulo of two numbers and stores the result in R4."
        },
        {
            "name": "mov",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register or value"
                },
                {
                    "name": "destination",
                    "info": "The destination register"
                }
            ],
            "info": "Moves a value from the source to the destination."
        },
        {
            "name": "cpy",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register"
                },
                {
                    "name": "destination",
                    "info": "The destination register"
                }
            ],
            "info": "Copies the value from the source register to the destination register (alias for MOV)."
        },
        {
            "name": "and",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Performs bitwise AND on two values and stores the result in R3."
        },
        {
            "name": "or",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Performs bitwise OR on two values and stores the result in R3."
        },
        {
            "name": "xor",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Performs bitwise XOR on two values and stores the result in R3."
        },
        {
            "name": "shr",
            "arguments": [
                {
                    "name": "value",
                    "info": "The register containing the value to shift"
                },
                {
                    "name": "amount",
                    "info": "The shift amount (register or value)"
                }
            ],
            "info": "Shifts the bits in the value register to the right by the specified amount and stores the result in R3."
        },
        {
            "name": "shl",
            "arguments": [
                {
                    "name": "value",
                    "info": "The register containing the value to shift"
                },
                {
                    "name": "amount",
                    "info": "The shift amount (register or value)"
                }
            ],
            "info": "Shifts the bits in the value register to the left by the specified amount and stores the result in R3."
        },
        {
            "name": "store",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register"
                },
                {
                    "name": "destination",
                    "info": "The destination memory address (in a register)"
                }
            ],
            "info": "Stores the value from the source register to the memory location specified by the destination register."
        },
        {
            "name": "lt",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Compares two values and stores 0 in R4 if op1 is less than op2, otherwise stores 1."
        },
        {
            "name": "gt",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Compares two values and stores 0 in R4 if op1 is greater than op2, otherwise stores 1."
        },
        {
            "name": "load",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source memory address (in a register)"
                },
                {
                    "name": "destination",
                    "info": "The destination register"
                }
            ],
            "info": "Loads a value from memory into the destination register."
        },
        {
            "name": "jmp",
            "arguments": [
                {
                    "name": "address",
                    "info": "The line number to jump to"
                }
            ],
            "info": "Jumps to the specified line number."
        },
        {
            "name": "jz",
            "arguments": [
                {
                    "name": "address",
                    "info": "The line number to jump to if I8 is zero"
                }
            ],
            "info": "Jumps to the specified line number if the I8 register is zero."
        },
        {
            "name": "jnz",
            "arguments": [
                {
                    "name": "address",
                    "info": "The line number to jump to if I8 is not zero"
                }
            ],
            "info": "Jumps to the specified line number if the I8 register is not zero."
        },
        {
            "name": "peek",
            "arguments": [
                {
                    "name": "destination",
                    "info": "The destination register"
                }
            ],
            "info": "Copies the value at the top of the stack into the destination register without removing it from the stack."
        },
        {
            "name": "pop",
            "arguments": [
                {
                    "name": "destination",
                    "info": "The destination register"
                }
            ],
            "info": "Pops the top value from the stack and stores it in the destination register."
        },
        {
            "name": "push",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register or value"
                }
            ],
            "info": "Pushes a value onto the stack."
        },
        {
            "name": "pushl",
            "arguments": [
                {
                    "name": "value",
                    "info": "The 64-bit integer value to push onto the stack"
                }
            ],
            "info": "Pushes a 64-bit integer literal onto the stack."
        },
        {
            "name": "prints",
            "arguments": [],
            "info": "Prints the value at the top of the stack."
        },
        {
            "name": "printr",
            "arguments": [
                {
                    "name": "register",
                    "info": "The register to print"
                }
            ],
            "info": "Prints the decimal representation of the value in the specified register."
        },
        {
            "name": "strlen",
            "arguments": [
                {
                    "name": "string",
                    "info": "The register containing the address of the string"
                }
            ],
            "info": "Calculates the length of a string and stores the result in R4."
        },
        {
            "name": "not",
            "arguments": [
                {
                    "name": "operand",
                    "info": "The register containing the value to negate"
                }
            ],
            "info": "Performs bitwise NOT on the operand and stores the result in R3."
        },
        {
            "name": "eq",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Compares two values and stores 1 in I4 if they are equal, otherwise stores 0."
        },
        {
            "name": "inr",
            "arguments": [
                {
                    "name": "register",
                    "info": "The register to check"
                }
            ],
            "info": "Checks if a register is null and stores 1 in R6 if it is, otherwise stores 0."
        },
        {
            "name": "dealloc",
            "arguments": [
                {
                    "name": "address",
                    "info": "The memory address to deallocate"
                }
            ],
            "info": "Deallocates the memory at the specified address."
        },
        {
            "name": "sleep",
            "arguments": [
                {
                    "name": "milliseconds",
                    "info": "The number of milliseconds to sleep (register or value)"
                }
            ],
            "info": "Pauses execution for the specified number of milliseconds."
        },
        {
            "name": "xadd",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Adds two values of any type and stores the result in R5."
        },
        {
            "name": "xsub",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The operand to subtract from (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The operand to subtract (register or value)"
                }
            ],
            "info": "Subtracts two values of any type and stores the result in R5."
        },
        {
            "name": "xmul",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The first operand (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The second operand (register or value)"
                }
            ],
            "info": "Multiplies two values of any type and stores the result in R5."
        },
        {
            "name": "xdiv",
            "arguments": [
                {
                    "name": "op1",
                    "info": "The dividend (register or value)"
                },
                {
                    "name": "op2",
                    "info": "The divisor (register or value)"
                }
            ],
            "info": "Divides two values of any type and stores the result in R5."
        },
        {
            "name": "xpow",
            "arguments": [
                {
                    "name": "base",
                    "info": "The base (register or value)"
                },
                {
                    "name": "exponent",
                    "info": "The exponent (register or value)"
                }
            ],
            "info": "Raises a number to a power and stores the result in R5."
        },
        {
            "name": "itof",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register (containing a Long)"
                },
                {
                    "name": "destination",
                    "info": "The destination register (to store the converted Double)"
                }
            ],
            "info": "Converts a Long to a Double."
        },
        {
            "name": "ftoi",
            "arguments": [
                {
                    "name": "source",
                    "info": "The source register (containing a Double)"
                },
                {
                    "name": "destination",
                    "info": "The destination register (to store the converted Long)"
                }
            ],
            "info": "Converts a Double to a Long."
        }
    ]
}